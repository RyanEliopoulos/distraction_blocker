@TODO Have the time picker text color change to red with invalid time selection.


10/7/2022
    Firefox does not allow importing in javascript files (unless the background script is a "page").

    I think this means I have to run a background page on install to register listeners. Then the popup button
    can broadcast when the settings have changed. Then the background page/script can modify the filtering callbacks
    as needed.  I guess the background page doens't have to be a page, I could shove everything into one file. But that
    is kinda gross.


    Background scripts: All background scripts are ran on install. This is how to jump start things.
        So really each file denoted as a background script is meant to be a self-contained entity but with the ability
        to communicate with other scripts using the communication APIs. ok ok.




    Extension Pages:  Easy way to relay errors to the frontend. Also good for any UI unsuitable for the popup window.
                      Maybe an "advanced" settings page for more granular control later on.  Query strings can also
                      be used so that is cool.


    Debugger: The extension debugger is working even if you are messing with the popup in another tab/window. Great!


    Content scripts: Loaded programmatically, they are unregistered when the page/script from which they were registered
                     is unloaded.



    FINALLY a working proof of concept. The manual override button took a bit of work. Couldn't find a way to accomplish
    this without using storage.local as a "sychronous" means of communicating intent from the extension page to the
    filter. It is synchrounous in the sense that everything is stuffed in nested promise resolutions.

10/6/2022

    Default security policy of the extension prevents inline scripts from running in that page. For example,
    my popup html page cannot import settings.js and use one of the functions as the onclick attribute for a button.
    However, it does execute the javascript inside of the contained inside settings.js
    I think the button listeners need to be added in javascript.


    Time picker (input type="time"): Value is based on a 24-hour clock even when presenting as a 12-hour AM/PM element.
          Value is hh:mm formatted string. Value is the empty string until all fields are filled in.


    Manifest V3
        Use of webRequest will require specifying target domains in the manifest file. So no dynamic block list
        without specifying "<all_urls>"?



10/5/2022

    Target functionality:
        Basic: User creates a list of target domains and a daily time window in which those websites are "blocked".
               Loading one of the target domains causes the extension to present a page:

                    "You don't want to visit $site right now. Your productivity window lasts another $time_remaining"
                                        <OK>                           <Override>


            APIs of interest
            webRequest.onBeforeRequest: Intercept http requests.

        Advanced:
            Time rationing: Allow user to specify a daily time limit on the target websites.




                  APIs of interest
                  tabs.onActivated: Callback fires when the active tab in a window changes. Use to track time on site?
                  tabs.onRemoved: Callback fires when the tab is closed. Cease time ration reduction
                  tabs.connect: Connects background script to content scripts in a given tab. Connection-based.
                  runtime.onMessage/runtime.sendMessage: one-off message exchange.







    Background scripts: Specified in the manifest file. Can be persistent. Can also specify a background "page" rather
                        than a script. Such a move adds supports ES modules.

                        nonpersistent background scripts are unloaded after a few seconds of inactivity. Monitor this
                        using runtime.onSuspend to install a callback, taking care of any necessary cleanup.

                        Use the background code to initialize listener callbacks to events.


                        manifest v3 Does away with persistent background pages. runtime.getBackgroundPage() returns
                        the Window of a background page?


