@TODO Have the time picker text color change to red with invalid time selection.
@TODO time rationing
@TODO Selective enforcement by day
@TODO Transmit patterns to the filter script on boot/install rather than just on "save changes"
I think the above is done, though won't know until it is signed and installed after rebooting firefox.


11/8/2022
    Updated the hourglass icon to have a transparent background.

    Hopeful bugfix with the onStartup call. The callback triggers, calling runtime.sendMessage but there aren't
    any listeners established yet. Replaced that with a direct call to onUpdate instead.


    Permanently install unsigned addon:
    1) Must use Firefox developer edition.
    2) about:config and turn xpinstall.signatures.required to false
    3) update manifest to include
             "browser_specific_settings": {
                "gecko": {
                  "id": "test@gmail.com"
                }
              }
    4) about:addons - install add on from file (all zipped together).


11/7/2022
    Updated to redirect the offending tab to the extension page rather than close and open in a new tab.  The redirect
    will replace the offending page in the tab history the 'back' functionality will not simply re-trigger the filter.


10/8/2022

    "GLOBAL" variables: Lack of import/export support by mozilla is annoying. There are apparently packaging tools
                  that can rebundle the files to add that sort of functionality. Not clear to me at this time though.
                  Another possible thing to do: use "window" on pages as a global variable store. Properties of window
                  are global variables, and we can add properties to window. But this would apply to content scripts o
                  only I think (maybe if we run the background page it would be fine..yes. Also extension pages would
                  be fine too I think).


    OMG: I can use functions across background script files without the need for import statements!!!
         This does not seem to be a javascript thing. Weird. But great.
         Ok, the background scripts are all loaded into the same backgroun page and share the same window global
         context. They are loaded in the order that they appear. More[https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/background]

         This is like (or is idk) injecting script tags into a page. Subsequent scripts can access functions from
         previous script tags.

10/7/2022
    Firefox does not allow importing in javascript files (unless the background script is a "page").

    I think this means I have to run a background page on install to register listeners. Then the popup button
    can broadcast when the settings have changed. Then the background page/script can modify the filtering callbacks
    as needed.  I guess the background page doens't have to be a page, I could shove everything into one file. But that
    is kinda gross.


    Background scripts: All background scripts are ran on install. This is how to jump start things.
        So really each file denoted as a background script is meant to be a self-contained entity but with the ability
        to communicate with other scripts using the communication APIs. ok ok.




    Extension Pages:  Easy way to relay errors to the frontend. Also good for any UI unsuitable for the popup window.
                      Maybe an "advanced" settings page for more granular control later on.  Query strings can also
                      be used so that is cool.


    Debugger: The extension debugger is working even if you are messing with the popup in another tab/window. Great!


    Content scripts: Loaded programmatically, they are unregistered when the page/script from which they were registered
                     is unloaded.



    FINALLY a working proof of concept. The manual override button took a bit of work. Couldn't find a way to accomplish
    this without using storage.local as a "sychronous" means of communicating intent from the extension page to the
    filter. It is synchrounous in the sense that everything is stuffed in nested promise resolutions.


    PROBLEM: Current design runs into a problem if content from target URLs is loaded into a non-blocked page.
             The extension is only passed the URI of the offending content, causing manual override to often load
             nothing at all.

    SOLVED: webNavigation callback has details.frameId. 0 means it's top level, >0 means it is embedded. So
            ignoring embedded frames solved the problem.


    Loop Prevention (on extension page):
        1) Now PROPERLY ignoring filter if the URL starts with "moz-extension"
        2) Can B64 encode (encodeURIComponent/decode..) the URL string before loading the extension page.

10/6/2022

    Default security policy of the extension prevents inline scripts from running in that page. For example,
    my popup html page cannot import settings.js and use one of the functions as the onclick attribute for a button.
    However, it does execute the javascript inside of the contained inside settings.js
    I think the button listeners need to be added in javascript.


    Time picker (input type="time"): Value is based on a 24-hour clock even when presenting as a 12-hour AM/PM element.
          Value is hh:mm formatted string. Value is the empty string until all fields are filled in.


    Manifest V3
        Use of webRequest will require specifying target domains in the manifest file. So no dynamic block list
        without specifying "<all_urls>"?



10/5/2022

    Target functionality:
        Basic: User creates a list of target domains and a daily time window in which those websites are "blocked".
               Loading one of the target domains causes the extension to present a page:

                    "You don't want to visit $site right now. Your productivity window lasts another $time_remaining"
                                        <OK>                           <Override>


            APIs of interest
            webRequest.onBeforeRequest: Intercept http requests.

        Advanced:
            Time rationing: Allow user to specify a daily time limit on the target websites.




                  APIs of interest
                  tabs.onActivated: Callback fires when the active tab in a window changes. Use to track time on site?
                  tabs.onRemoved: Callback fires when the tab is closed. Cease time ration reduction
                  tabs.connect: Connects background script to content scripts in a given tab. Connection-based.
                  runtime.onMessage/runtime.sendMessage: one-off message exchange.







    Background scripts: Specified in the manifest file. Can be persistent. Can also specify a background "page" rather
                        than a script. Such a move adds supports ES modules.

                        nonpersistent background scripts are unloaded after a few seconds of inactivity. Monitor this
                        using runtime.onSuspend to install a callback, taking care of any necessary cleanup.

                        Use the background code to initialize listener callbacks to events.


                        manifest v3 Does away with persistent background pages. runtime.getBackgroundPage() returns
                        the Window of a background page?


